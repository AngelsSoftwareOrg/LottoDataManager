// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace LottoDataManager.Includes.Classes.Reports.Templates.Fragments
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Development\WorkSpace00002\LottoDataManager\Includes\Classes\Reports\Templates\Fragments\Header_Fragment.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Header_Fragment : Header_FragmentBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\'utf-8\'>\r\n        <m" +
                    "eta http-equiv=\'X-UA-Compatible\'>\r\n        <meta name=\'viewport\' content=\'width=" +
                    "device-width, initial-scale=1\'>\r\n\r\n        <title> Lottery Report </title>\r\n    " +
                    "    ");
            this.Write("\r\n<!--link rel=\"stylesheet\" href=\"main_style.css\" type=\"text/css\" media=\"all\" -->" +
                    "\r\n<style>\r\n\r\nbody{\r\n    margin: 0px;\r\n}\r\n\r\n.dashboard-box{\r\n    width: 100%;\r\n  " +
                    "  height: 300px;\r\n    background-color: cornflowerblue;\r\n}\r\n.dashboard-box-conte" +
                    "nt{\r\n    vertical-align: middle;\r\n    /* border: 2px dashed #444; */\r\n    height" +
                    ": 50%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    transform: " +
                    "translate(0, 50%);\r\n}\r\n\r\n.dashboard-box-content .title-partition{\r\n    /* border" +
                    ": 2px dashed #444; */\r\n    width: 100%;\r\n    height: 100%;\r\n    vertical-align: " +
                    "middle;\r\n    margin: 0 10px 0 10px;\r\n\r\n}\r\n\r\n.dashboard-box-title{\r\n    font-weig" +
                    "ht: bold;\r\n    color: ghostwhite;\r\n    font-size: 4em;\r\n    text-shadow: 0 2px 2" +
                    "px rgba(0,0,0,.5);\r\n    font-family: Impact, Haettenschweiler, \'Arial Narrow Bol" +
                    "d\', sans-serif;\r\n}\r\n.dashboard-box-sub-title{\r\n    font-size: 2em;\r\n    text-sha" +
                    "dow: 0 2px 2px rgba(0,0,0,.5);\r\n    color: whitesmoke;\r\n    font-family: \'Trebuc" +
                    "het MS\', \'Lucida Sans Unicode\', \'Lucida Grande\', \'Lucida Sans\', Arial, sans-seri" +
                    "f;\r\n}\r\n\r\n.dashboard-box-winnings{\r\n    font-weight: bold;\r\n    color: greenyello" +
                    "w;\r\n    font-size: 5em;\r\n    text-shadow: 0 5px 1px rgba(101, 60, 60, 0.5);\r\n   " +
                    " font-family: Impact, Haettenschweiler, \'Arial Narrow Bold\', sans-serif;\r\n    te" +
                    "xt-align: center;\r\n}\r\n.dashboard-box-sub-winnings{\r\n    font-size: 1.3em;\r\n    f" +
                    "ont-style: italic;\r\n    text-shadow: 0 2px 2px rgba(0,0,0,.5);\r\n    color: white" +
                    "smoke;\r\n    font-family: \'Trebuchet MS\', \'Lucida Sans Unicode\', \'Lucida Grande\'," +
                    " \'Lucida Sans\', Arial, sans-serif;\r\n    text-align: center;\r\n}\r\n.page-spacer{\r\n " +
                    "   width:100%;\r\n    height: 500px;\r\n}\r\n\r\n\r\n/*\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" +
                    "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    REPORT" +
                    " BOX CONTENT\r\n*/\r\n.report-box{\r\n    top: 50px;\r\n    font-family: Verdana, Geneva" +
                    ", Tahoma, sans-serif;\r\n}\r\n\r\n.outline-container{\r\n    margin: 50px 10px 0px 10px;" +
                    "\r\n}\r\n\r\n.title-keyword{\r\n    font-size: 1.5em;\r\n    color: mediumturquoise;\r\n    " +
                    "font-weight: bold;\r\n}\r\n\r\n.title-description{\r\n    color: green;\r\n    font-weight" +
                    ": bold;\r\n}\r\n\r\n.report-box .default-table {\r\n    width: 100%;\r\n    margin: 20px 3" +
                    "0px 30px 30px;\r\n    border: 0px solid black;\r\n}\r\n\r\n.report-box .default-table tr" +
                    " td:first-of-type{\r\n    width: 350px;\r\n    border: 0px solid black;\r\n}\r\n.report-" +
                    "box .default-table td{\r\n    border: 0px solid black;\r\n    vertical-align: top;\r\n" +
                    "}\r\n\r\n.report-box .yearly-tallying{\r\n    border: 2px solid black;\r\n    text-align" +
                    ": left;\r\n    width: 50%;\r\n    \r\n}\r\n\r\n.report-box .table-stats-style{\r\n    table-" +
                    "layout:auto;\r\n    text-align: left;\r\n    margin-left: 30px;\r\n    margin-top: 30p" +
                    "x;\r\n}\r\n.table-stats-style tr td{\r\n    border: 2px solid rgb(194, 189, 189);\r\n}\r\n" +
                    ".table-stats-style th{\r\n    border: 2px solid rgb(194, 189, 189);\r\n    backgroun" +
                    "d-color:whitesmoke;\r\n}\r\n\r\n.table-stats-style tbody{\r\n    table-layout:auto;\r\n}\r\n" +
                    "\r\n.table-stats-style tr td:first-of-type{\r\n    min-width: 50px;\r\n}\r\n</style>");
            this.Write("\r\n    </head>\r\n    <body>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class Header_FragmentBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
