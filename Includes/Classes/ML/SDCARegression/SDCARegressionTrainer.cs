// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using LottoDataManager.Includes.Utilities;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;

namespace LottoDataManager.Includes.Classes.ML.SDCARegression
{
    public class SDCARegressionTrainer: MLModelBuilderAbstract
    {
        private static string MODEL_FILE = SDCARegressionPredictor.MLNetModelPath;
        private static string OUTPUT_COLUMN_NAME = "PREDICT";

        // Create MLContext to be shared across the model creation workflow objects 
        // Set a random seed for repeatable/deterministic results across multiple trainings.
        private static MLContext mlContext = new MLContext(seed: 1);

        public override void CreateModel(String trainDataFilePath)
        {
            InvokeProcessingStatus(ResourcesUtils.GetMessage("mac_lrn_bldr_log_1"));
            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<SDCARegressionInputModel>(
                                            path: @trainDataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Build training pipeline
            IEstimator<ITransformer> trainingPipeline = BuildTrainingPipeline(mlContext);

            // Train Model
            ITransformer mlModel = RetrainModel(mlContext, trainingDataView, trainingPipeline);

            // Evaluate quality of Model
            Evaluate(mlContext, trainingDataView, trainingPipeline, OUTPUT_COLUMN_NAME);

            // Save model
            SaveModel(mlContext, mlModel, MODEL_FILE, trainingDataView.Schema);
        }

        public IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations 
            var dataProcessPipeline = mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair("winners", "winners") })
                                      .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(new[] { new InputOutputColumnPair("game_cd", "game_cd") }))
                                      .Append(mlContext.Transforms.Text.FeaturizeText("draw_date_tf", "draw_date"))
                                      .Append(mlContext.Transforms.Concatenate("Features", new[] { "winners", "game_cd", "draw_date_tf", "num1", "num2", "num3", "num4", "num5", "num6" }))
                                      .Append(mlContext.Transforms.NormalizeMinMax("Features", "Features"))
                                      .AppendCacheCheckpoint(mlContext);
            // Set the training algorithm 
            var trainer = mlContext.Regression.Trainers.Sdca(new SdcaRegressionTrainer.Options() { L2Regularization = 1E-07f, L1Regularization = 0.5f, ConvergenceTolerance = 0.01f, Shuffle = false, BiasLearningRate = 0.1f, LabelColumnName = @"PREDICT", FeatureColumnName = "Features" });

            var trainingPipeline = dataProcessPipeline.Append(trainer);

            return trainingPipeline;
        }

    }
}
